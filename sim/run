#!/usr/bin/env ruby
$:.unshift File.join(File.dirname(__FILE__))
$:.unshift File.join(File.dirname(__FILE__), '../external/aws')
$:.unshift File.join(File.dirname(__FILE__), '../external/aws-s3/lib')

require 'core'
require 'optparse'
require 'sqs'
require 'sqs/client'
require 'sqs/queue'
require 'aws/s3'

Dir.glob('simulations/specs/*.rb').each {|file| require file}

AMAZON_ACCESS_KEY_ID     = ENV['AMAZON_ACCESS_KEY_ID']
AMAZON_SECRET_ACCESS_KEY = ENV['AMAZON_SECRET_ACCESS_KEY']
ENDPOINT = 'http://queue.amazonaws.com'
QUEUE    = 'jgre-rdtnsimspecs'
BUCKET   = 'jgre-rdtnsim-results'

def make_client
  AWS::SQS::Client.new(AMAZON_ACCESS_KEY_ID, AMAZON_SECRET_ACCESS_KEY,
		       :endpoint => ENDPOINT)
end

def init_s3
  AWS::S3::Base.establish_connection!(:access_key_id => AMAZON_ACCESS_KEY_ID, :secret_access_key => AMAZON_SECRET_ACCESS_KEY)
  AWS::S3::Bucket.create('jgre-rdtnsim-results')
end

def send_spec_to_sqs(specs)
  client = make_client
  begin
    queue = client.create_queue(QUEUE)
  rescue => ex
    puts ex
  end

  specs.each {|spec| queue.send_message(CGI.escape(spec.to_yaml))}
end

class SQSSpecList
  def initialize
    @q = AWS::SQS::Queue.new(QUEUE, make_client)
  end

  def shift
    msg  = @q.receive_messages(1)
    return nil if msg.empty? || msg[0].empty?
    body = CGI.unescape(msg[0]["Message"][0]["Body"][0])
    receipt_handle = msg[0]["Message"][0]["ReceiptHandle"][0]
    @q.delete_message receipt_handle
    YAML.load body
  end
end

# get commit hash
revision = IO.popen("git log --pretty=tformat:%h -n1") {|p| p.read.strip}

parallel = 1
git      = false
variants = true
analysis = false
analysis_only = false
spec_from_sqs = false
spec_to_sqs   = false
store_in_s3   = false
launch_ami    = nil
keypair       = nil
opts     = OptionParser.new
opts.on('-p[=N]', '--parallel[=N]', Integer) {|n| parallel = n || 2}
opts.on('-g', '--git')                       {git      = true}
opts.on('-v', '--without-variants')          {variants = false}
opts.on('-a', '--analysis')                  {analysis = true}
opts.on('-A', '--analysis-only')             {analysis = analysis_only = true}
opts.on('-s', '--specs-from-sqs')            {spec_from_sqs = true}
opts.on('-S', '--specs-to-sqs')              {spec_to_sqs   = true}
opts.on('-3', '--store-in-s3')               {store_in_s3   = true}
opts.on('-r[=rev]', '--revision[=rev]')      {|rev| revision = rev}
opts.on('-e[=AMI]', '--ec2[=AMI]')           {|ami| launch_ami = ami}
opts.on('-k[=keypair]','--keypair[=keypair]'){|kp| keypair = kp}
spec = opts.parse(ARGV).first

# FIXME error message if no spec is given

if store_in_s3
  bucket = init_s3
end

unless analysis_only
  specs = spec_from_sqs ? SQSSpecList.new : Sim::Specification.loadSpec(spec).createVariants

  if spec_to_sqs
    send_spec_to_sqs(specs)
  else
    until (s = specs.shift).nil?
      puts "Running variant #{s.var_idx}"
      variant, network, traffic = Sim::Core.runBySpec s

      obj_id = "#{s.class}/#{revision}/#{s.var_idx}"
      dir = File.join(File.dirname(__FILE__),"../simulations/results/#{obj_id}")
      if store_in_s3
	AWS::S3::S3Object.store "#{obj_id}/network",Marshal.dump(network),BUCKET
	AWS::S3::S3Object.store "#{obj_id}/traffic",Marshal.dump(traffic),BUCKET
	AWS::S3::S3Object.store "#{obj_id}/variant",YAML.dump(variant),BUCKET
      else
	FileUtils.mkdir_p dir
	open(File.join(dir, 'network'), 'w'){|f| Marshal.dump(network, f)}
	open(File.join(dir, 'traffic'), 'w'){|f| Marshal.dump(traffic, f)}
        open(File.join(dir, 'variant'), 'w'){|f| YAML.dump(variant, f)}
      end

      if s.respond_to? :preprocess

        Analysis.preprocess([[variant, network, traffic]]) do |var,net,traffic|
          prep = s.preprocess(var, net, traffic)
          if store_in_s3
            AWS::S3::S3Object.store "#{obj_id}/prep", Marshal.dump(prep), BUCKET
          else
            open(File.join(dir, 'prep'), 'w') {|f| Marshal.dump(prep, f)}
          end
          prep
        end
      end
    end
  end
end

dir = File.join(File.dirname(__FILE__), "../simulations/results/#{spec}/#{revision}")

if analysis
  if store_in_s3
    specs = Sim::Specification.loadSpec(spec).createVariants
    puts "#{specs.length} specs"
    bucket = AWS::S3::Bucket.find BUCKET
    variants = []
    specs.length.times do |i|
      variant = bucket["#{spec}/#{revision}/#{i}/variant"]
      network = bucket["#{spec}/#{revision}/#{i}/network"]
      traffic = bucket["#{spec}/#{revision}/#{i}/traffic"]
      prep    = bucket["#{spec}/#{revision}/#{i}/prep"]
      if [variant, network, traffic].any?(&:nil?)
	puts "ERROR: incomplete data for variant #{i}:\n  #{[variant, network, traffic].inspect}"
	next
      else
	puts "Downloaded variant #{i}"
      end

      open(File.join(dir, 'network'), 'w'){|f| f.write(network.value.to_s)}
      open(File.join(dir, 'traffic'), 'w'){|f| f.write(traffic.value.to_s)}
      open(File.join(dir, 'variant'), 'w'){|f| f.write(variant.value.to_s)}
      open(File.join(dir, 'prep'),    'w'){|f| f.write(prep.value.to_s)}

      variants << [YAML.load(variant.value.to_s), Marshal.load(network.value.to_s), Marshal.load(traffic.value.to_s), Marshal.load(prep.value.to_s)]
    end
  else
    variants = Dir.glob("#{dir}/*").map do |d|
      networkfile = File.join(d, 'network')
      trafficfile = File.join(d, 'traffic')
      variantfile = File.join(d, 'variant')
      prepfile    = File.join(d, 'prep')

      next unless File.exist?(networkfile) and File.exist?(trafficfile) and File.exist? variantfile

      puts "Opening stats for from #{d}"

      variant = open(variantfile) {|f| YAML.load(f)}
      network = open(networkfile) {|f| Marshal.load(f)}
      traffic = open(trafficfile) {|f| Marshal.load(f)}
      prep    = open(prepfile) {|f| Marshal.load(f)}

      [variant, network, traffic, prep]
    end
  end

  Sim::Core.analyzeBySpec(spec, variants, dir)
end

if launch_ami && keypair
  `ec2-run-instances #{launch_ami} -k #{keypair} -n #{parallel} -d halt-when-done`
end
