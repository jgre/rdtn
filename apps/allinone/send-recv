#!/usr/bin/env ruby
#  Copyright (C) 2007 Janico Greifenberg <jgre@jgre.org> and 
#  Dirk Kutscher <dku@tzi.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

$:.unshift File.join(File.dirname(__FILE__), "..", "..", "lib")

require "clientapi"
require "clientlib"
require 'optparse'
require 'bundle'
require 'configuration'
require "stats"
require "daemon"
require "subscriptionhandler"


log = RdtnConfig::Settings.instance.getLogger(self.class.name)
dest = "dtn://hamlet.dtn/test"
eid = "send-recv"
subscribeUri = nil
port=RDTNAPPIFPORT
host="localhost"

opts = OptionParser.new do |opts|
  opts.on("-d", "--dest EID", "destination EID") do |d|
    dest=d
  end
  opts.on("-l", "--local EID", "local EID") do |l|
    eid = l
  end
  opts.on("-S", "--subscribe URI", "subscribe to URI") do |s|
    subscribeUri = s
  end
  opts.on("-p", "--port PORT", "Connect to client interface on PORT") do |p|
    port = p
  end
  opts.on("-h", "--host HOST", "Connect to client interface on HOST") do |h|
    host = h
  end
end

daemon = RdtnDaemon::Daemon.new(opts)

if not ARGV.empty?
  plFile = open(ARGV[0])
else
  plFile = $stdin
end

puts RdtnConfig::Settings.instance.localEid
c=RdtnClient.new(host, port)
c.register(eid) do |bundle|
  puts "Bundle received from #{bundle.srcEid} to #{bundle.destEid}"
  puts "Payload:", bundle.payload
end

subscribeHandler = SubscriptionHandler.new(nil, RdtnClient.new(host, port))
if subscribeUri
  subscribeHandler.subscribe(subscribeUri) do |bundle|
    puts "Subscribed Bundle received from #{bundle.srcEid} to #{bundle.destEid}"
    puts "Payload:", bundle.payload
  end
end

Thread.new(plFile) do |file|
  while not file.eof?
    puts "Reading..."
    payload=file.readline
    puts "Read"
    if payload.empty?
      Thread.current.exit
    end
    b = Bundling::Bundle.new(payload, EID.new(dest))
    log.debug("sending bundle")
    c.sendBundle(b)
  end
  Thread.current.exit
end

log.debug("Starting DTN daemon main loop")

daemon.runLoop

ObjectSpace.each_object(Link) {|link| link.close}
ObjectSpace.each_object(Interface) {|iface| iface.close}
