#!/usr/bin/env ruby
# -*-ruby-*-

$:.unshift File.join(File.dirname(__FILE__), "../..", "lib")

require 'optparse'
require "clientapi"
require "clientlib"
require "clientregcl"


require "event-loop/timer"

require 'bundle'
require 'tcpcl'
require 'rdtnlog'


log=RdtnLogger.instance()
log.level=Logger::DEBUG
RDTNConfig.instance.localEid = EID.new("dtn://dtncat")
dest=""
duration = 1

opts = OptionParser.new do |opts|
  opts.on("-d", "--dest EID", "destination EID") do |d|
    dest=d
  end
  opts.on("-l", "--local EID", "local EID") do |l|
    RDTNConfig.instance.localEid = EID.new(l)
  end
  opts.on("-L", "--loop INTERVAL", Integer) do |val|
    loopInterval = val
  end
  opts.on("-D", "--duration SECONDS", Integer) do |val|
    duration = val
  end
end

opts.parse!(ARGV)

log.debug("Starting dtncat")

if not ARGV.empty?
  plFile = open(ARGV[0])
else
  plFile = $stdin
end

payload=plFile.read
plFile.close
puts "Payload length: #{payload.length}"

ri = RegInfo.new(RDTNConfig.instance.localEid)
c=RdtnClient.new

EventLoop.later do
  log.debug("registering")
  c.open("localhost",7777)
  c.register(ri)
  b = Bundling::Bundle.new(payload)
  b.destEid = EID.new(dest)
  log.debug("sending bundle")
  c.sendBundle(b)
end

EventLoop.after(duration) do
  c.close
  log.debug("Stopping notifier")
  EventLoop.quit()
end

if defined?(loopInterval)
  EventLoop.every(loopInterval.seconds) do
    log.debug("sending bundle")
    c.sendBundle(b)
  end

end
    
EventLoop.run()




