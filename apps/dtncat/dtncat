#!/usr/bin/env ruby
# -*-ruby-*-
#  Copyright (C) 2007 Janico Greifenberg <jgre@jgre.org> and 
#  Dirk Kutscher <dku@tzi.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

$:.unshift File.join(File.dirname(__FILE__), "../..", "lib")

require 'optparse'
require "clientlib"

require 'bundle'


dest = ""
eid = "/dtncat"
duration = 0
loopInterval = nil

opts = OptionParser.new do |opts|
  opts.on("-d", "--dest EID", "destination EID") do |d|
    dest = d
  end
  opts.on("-l", "--local EID", "local EID") do |l|
    eid = l
  end
  opts.on("-L", "--loop INTERVAL", Integer) do |val|
    loopInterval = val
  end
  opts.on("-D", "--duration SECONDS", Integer) do |val|
    duration = val
  end
end

opts.parse!(ARGV)

rdebug(self, "Starting dtncat")

if not ARGV.empty?
  plFile = open(ARGV[0])
else
  plFile = $stdin
end

payload=plFile.read
plFile.close
puts "Payload length: #{payload.length}"

client = RdtnClient.new
client.register(eid) {|bundle| puts "Bundle received #{bundle.payload}" }

b = Bundling::Bundle.new(payload, dest)
rdebug(self, "sending bundle")
client.sendBundle(b)

if loopInterval
  Thread.new(loopInterval) do |interv|
      while true
	sleep(interv)
	b = Bundling::Bundle.new(payload, dest)
	rdebug(self, "sending bundle")
	client.sendBundle(b)
      end
  end
  sleep(duration) # If no duration is specified the thread goes on forever.
end

client.close(2)
